#!/bin/bash

# $ 的作用是获取计算结果，类似于其他变量中的 $（如 $var 获取变量值）。
echo $(pwd)   # 获取命令的输出
echo $(( 1 + 2 ))  # 获取算术表达式的结果
echo ${word}  # 获取变量值

echo $(( 10 % 3 ))  # 输出: 1
remainder=$(( a % b ))  # 正确的赋值方式, $不能少

# $可以省略的情况
(( a++ ))  # 自增操作时$可以省略（不返回结果，仅修改 a 的值）
(( a-- ))  # 自减操作时$可以省略（不返回结果，仅修改 a 的值）
(( a += 2 ))  # 自增操作时$可以省略（不返回结果，仅修改 a 的值）
(( a -= 2 ))  # 自减操作时$可以省略（不返回结果，仅修改 a 的值）
(( a *= 2 ))  # 自乘操作时$可以省略（不返回结果，仅修改 a 的值）
(( a /= 2 ))  # 自除操作时$可以省略（不返回结果，仅修改 a 的值）
(( a %= 2 ))  # 自取余操作时$可以省略（不返回结果，仅修改 a 的值）

# Bash 的算术扩展 $(( )) 
# (( )) 是 Bash 中用于进行算术运算的语法，它可以在命令行中直接进行算术运算，并将结果返回。
# 其功能类似于let命令，但更简洁。

# 1, 简单的算术运算
let a=5+3
echo $a  # 输出 8

let b=10-2
echo $b  # 输出 8

let c=4*2
echo $c  # 输出 8

let d=16/2
echo $d  # 输出 8

let e=17%3
echo $e  # 输出 2

# 2, 变量赋值
let a=5
let a+=3
echo $a  # 输出 8

let b=10
let b-=2
echo $b  # 输出 8

let c=4
let c*=2
echo $c  # 输出 8

let d=16
let d/=2
echo $d  # 输出 8

# 3, 使用双括号
(( a = 5 + 3 ))
echo $a  # 输出 8

(( b = 10 - 2 ))
echo $b  # 输出 8

(( c = 4 * 2 ))
echo $c  # 输出 8

(( d = 16 / 2 ))
echo $d  # 输出 8

(( e = 17 % 3 ))
echo $e  # 输出 2

# 在 Bash 中，$(( )) 是 算术扩展（Arithmetic Expansion）的语法
# 而其中的 $ 符号起到了 触发算术计算并返回结果 的关键作用。
for ((j=1; j <= 30; j++))
do
  echo $(( j % 3 ))   # 取余运算, $不能少
  if (( j % 3 == 0)); then
      echo $j
  fi
done


